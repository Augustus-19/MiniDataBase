ASSIGNMENT 3:Record Manager

OBJECTIVE: To implement a simple record manager that allows navigation through records, and inserting and deleting records


TEAM MEMBERS:
1. Kiran C D
2. Sashank B V
3. Adarsh S


FILES INCLUDED:

Makefile
buffer_mgr.h
buffer_mgr_stat.c
buffer_mgr_stat.h
dberror.c
dberror.h
expr.c
expr.h
record_mgr.h
rm_serializer.c
storage_mgr.h
tables.h
test_assign3_1.c
test_expr.c
test_helper.h


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HOW TO BUILD THE PROJECT:
	1) run "make all" from the assign3 directory, this will create output files "test_assign3_1
	2) run "make clean" from the assign3 directory to delete all files created by previous build


HOW TO RUN THE PROJECT:
	1) Build the project using description in previous section
	2) run "./test_assign3_1" to run the testcases defined in the test assign file 
	3) run "./test_expr" to run the testcases defined in the test assign file 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


FUNCTION DESCRIPTION:


SL NO 						NAME				DESCRIPTION
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Table and Record Manager Functions

1.					initRecordManager			This function initializes the record manager with an entry

2.					shutdownRecordManager 			This function closes/shutdowns the record manager

3.					createTable 				This function creates a table if it doesnot exist and creates a pagefile for each 											table

4.					openTable 				This function opens the table of a given name

5.					closeTable				This function closes the table of a given name

6.					deleteTable				This function deletes the table with given name

7.					getNumTuples 				This function returns the number of tuples in the table

Handling records in a table


8.					insertRecord 				This function inserts a new record into a table

9.					deleteRecord 				This function deletes the record of a particular RID when passed as an parameter

10.					updateRecord 				This function updates the new values to an existing record

11.					getRecord 				This function retrieves the record of a particular RID when passed as an parameter


Scans

12.					startScan 				This function initialize a new scan manager.

13.					next 					This function returns the next tuple that fullfills the scan condition

14.					closeScan 				This function cleans up the initialized scan manager

Dealing with schemas


15.					getRecordSize				This function returns the size of the each record of a given schema

16.					createSchema				This function creates a new schema

17.					freeSchema 				This function frees the assigned schema values

Dealing with records and attribute values

18.					createRecord 				This Function creates a new record for a given schema

19.					freeRecord 				This function frees the assigned record

20.					getAttr 				This function returns the value of the attribute with the specified name, of an 										element.

21.					setAttr 				This function adds the specified attribute to an element, and gives it the specified 											value

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DESIGN DESCRIPTION & FUTURE WORK:
In our implementation we have added table and record Manager functions which will initialize and shutdown a record manager. 
We have added functions to create, open, and close a table. We have added record function which are used to retrieve a record with a certain RID, to delete a record with a certain RID, to insert a new record, and to update an existing record with new values.
We have added scan function that can initiate a scan to retrieve all tuples from a table that fulfill a certain condition. 
Starting a scan initializes the RM_ScanHandle data structure passed as an argument to startScan. 
Afterwards, calls to the next method will return the next tuple that fulfills the scan condition.
The attribute functions which we have added are used to get or set the attribute values of a record and create a new record for a given schema. 

Additional functionalities

----------------------------

Tombstone:
When the data is deallocated,we use tombstone to set them as null there by indicating that the variable no longer exists. 
This is done to prevent the use of invalid pointers, which would otherwise access the memory area that once belonged to the now deallocated variable.
We have implemented tombstone to flush the bulk records by grouping their Rids.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TESTCASES

SL NO	Objective						Observed result							Expected result
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.	test creating records and manipulating attributes	Records and attributes are created and can be manipulated	Records should be created and can be 
																manipulated.

2.	test creating a new table and inserting tuples		New table can be created and tuples can be inserted into it	Table should be created and new tuples
																should be inserted

3.	test running muliple scans				Scanning returns the tuples fulfilling the scan condition	Tuples fulfilling the scan condition 
																should be returned

4.	test creating a new table and insert,update,		Tuples can be inserted deleted or updated from the table	Operations such as insert,update and 
	delete tuples														delete should work

5.	test creating a new table and inserting 10000 		Multiple records can be inserted into the table and can be 	Able to handle the insertion of 
	records then updating record from rids			updated by their rids						multiple records into the table

6.	test value serialization and deserialization		serializes and deserializes the values inserted into the	Serialize and deserialize the values
								record

7.	test value comparison and boolean operators		string to value comparison successfully verified		string to value comparison should be 																	verified

8.	test complex expressions				Some of the complex expressions are verified			Complex expression should be tested  																	for string to value comparisons

9.	checks the return code and exit if it's and error	The return code is checked for any errors and exits		An error in the return code should 																	result in an exit

10.	check whether two strings are equal			Checks two strings and returns if they are equal		Checks for the equality of two strings

11.	check whether two ints are equals			Checks two integers and returns if they are equal		Checks for the equality of two 																	integers

12.	check that a method returns an error code		The return code of a method is checked for any errors 		An error in the return code should 									and exits.							result in an exit	
