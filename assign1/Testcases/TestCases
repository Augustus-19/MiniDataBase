We use the memory mapped file IO operation which is better in performance compared to normal IO operation on the file.

>>>extern RC createPageFile (char *fileName);
test 1: provide filename which already exists
test 2: Provide filename which is not present
test 3: provide filename with improper extension.
test 4: Provide filename with improper pathName.

>>>extern RC openPageFile (char *fileName, SM_FileHandle *fHandle);
test 1: provide filename which already exists
test 2: provide filename which is not present
test 3: provide filename with improper extention.(may be equivalant to the test 1)
test 4: provide null for both parameters and either one of the parameter

>>>extern RC closePageFile (SM_FileHandle *fHandle);
test 1: provide null pointer for handle
test 2: provide actual valid fhandle

>>>extern RC destroyPageFile (char *fileName);
test 1: provide wrong fileName(the file which is not created by our database system)
test 2: provide null value to parameter
test 3: provide correct fileName

>>>extern RC readBlock (int pageNum, SM_FileHandle *fHandle, SM_PageHandle memPage);
test 1: provide wrong pageNum
test 2: provide wrong file handle
test 3: pass null value to memPage

>>>extern int getBlockPos (SM_FileHandle *fHandle);
test 1: provide wrong handle

>>>extern RC readFirstBlock (SM_FileHandle *fHandle, SM_PageHandle memPage);
test 1: provide wrong parameters
test 2: provide NULL to both parameters
test 3: write "testing readFirstBlock" and read back and verify


>>>extern RC readPreviousBlock (SM_FileHandle *fHandle, SM_PageHandle memPage);
test 1: provide wrong parameters
test 2: write first three blocks with all 0's 1's 2's respectively, read last block and readpreviousblock until it reaches 0th block
test 3: openPagefile and readPreviousBlock

>>>extern RC readCurrentBlock (SM_FileHandle *fHandle, SM_PageHandle memPage);
test 1: openPageFile and call readcurrentBlock
test 2: povide null and wrong parameters

>>>extern RC readNextBlock (SM_FileHandle *fHandle, SM_PageHandle memPage);
test 1: OpenPageFile and call readNextBlock
test 2: provide wrong input parameters
test 3: openPageFile, call readLastBlock and call readNextBlock


>>>extern RC readLastBlock (SM_FileHandle *fHandle, SM_PageHandle memPage);
test 1: OpenPageFile and call readLastBlock
test 2: provide wrong input parameters


/* writing blocks to a page file */
>>>extern RC writeBlock (int pageNum, SM_FileHandle *fHandle, SM_PageHandle memPage);
test 1: 


>>>extern RC writeCurrentBlock (SM_FileHandle *fHandle, SM_PageHandle memPage);



>>>extern RC appendEmptyBlock (SM_FileHandle *fHandle);



>>>extern RC ensureCapacity (int numberOfPages, SM_FileHandle *fHandle);





